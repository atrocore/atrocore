[
  {
    "route": "/",
    "method": "get",
    "params": "REST API"
  },
  {
    "route": "/App/user",
    "method": "get",
    "params": {
      "controller": "App",
      "action": "user"
    },
    "description": "Generate authorization token and return authorized user data.",
    "security": [
      {
        "basicAuth": []
      },
      {
        "Authorization-Token": []
      }
    ],
    "requestParameters": [
      {
        "name": "Authorization-Token-Only",
        "in": "header",
        "required": false,
        "schema": {
          "type": "boolean",
          "example": "true"
        }
      },
      {
        "name": "Authorization-Token-Lifetime",
        "in": "header",
        "required": false,
        "description": "Lifetime should be set in hours. 0 means no expiration. If this parameter is not passed, the globally configured parameter is used.",
        "schema": {
          "type": "integer",
          "example": "0"
        }
      },
      {
        "name": "Authorization-Token-Idletime",
        "in": "header",
        "required": false,
        "description": "Idletime should be set in hours. 0 means no expiration. If this parameter is not passed, the globally configured parameter is used.",
        "schema": {
          "type": "integer",
          "example": "0"
        }
      }
    ],
    "response": {
      "type": "object",
      "properties": {
        "authorizationToken": {
          "type": "string",
          "example": "YWRtaW46NGQ1NGU5ZTEzYjc0NGQzOGM5ODM2NzIyNDU2YTZmNjk="
        }
      }
    }
  },
  {
    "route": "/background",
    "method": "get",
    "params": {
      "controller": "App",
      "action": "background"
    },
    "conditions": {
      "auth": false
    },
    "description": "Get background data.",
    "response": {
      "type": "object",
      "properties": {
        "till": {
          "type": "object",
          "properties": {
            "date": {
              "type": "string",
              "example": "2024-08-29 08:52:29.830592"
            },
            "timezone_type": {
              "type": "integer",
              "example": 3
            },
            "timezone": {
              "type": "string",
              "example": "UTC"
            }
          }
        },
        "imageName": {
          "type": "string",
          "example": "pexels-pixabay-260689.jpg"
        },
        "imagePath": {
          "type": "string",
          "example": "client/img/background/pexels-pixabay-260689.jpg"
        },
        "authorName": {
          "type": "string",
          "example": "Pixabay"
        },
        "authorLink": {
          "type": "string",
          "example": "https://www.pexels.com/@pixabay"
        }
      }
    }
  },
  {
    "route": "/MassActions/action/upsert",
    "method": "post",
    "params": {
      "controller": "MassActions",
      "action": "upsert"
    },
    "summary": "Bulk Create and Bulk Update.",
    "description": "The system will try to find existing entities based on the identifier or unique fields. If an entity is found, it will be updated, otherwise it will be created by the system.",
    "requestParameters": [
      {
        "name": "Use-Queue",
        "in": "header",
        "required": false,
        "schema": {
          "type": "boolean",
          "example": "false"
        }
      }
    ],
    "requestBody": {
      "required": true,
      "content": {
        "application/json": {
          "schema": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "entity": {
                  "type": "string",
                  "example": "Product"
                },
                "payload": {
                  "type": "object",
                  "example": {
                    "id": "yellow_bike_1",
                    "name": "Yellow Bike"
                  }
                }
              }
            }
          }
        }
      }
    },
    "response": {
      "type": "array",
      "items": {
        "type": "object",
        "required": ["status", "stored"],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Created",
              "Updated",
              "Failed"
            ],
            "example": "Created"
          },
          "stored": {
            "type": "boolean",
            "example": true
          },
          "message": {
            "type": "string",
            "example": "Code: 400. Message: Validation failed. 'Name / de_DE' is required."
          },
          "entity": {
            "type": "object",
            "example": {
              "id": "yellow_bike_1",
              "name": "Yellow Bike"
            }
          }
        }
      }
    }
  },
  {
    "route": "/File/action/upload-proxy",
    "method": "post",
    "params": {
      "controller": "File",
      "action": "uploadProxy"
    },
    "conditions": {
      "auth": false
    }
  },
  {
    "route": "/File/action/reupload",
    "method": "put",
    "params": {
      "controller": "File",
      "action": "reupload"
    }
  },
  {
    "route": "/Composer/list",
    "method": "get",
    "params": {
      "controller": "Composer",
      "action": "list"
    }
  },
  {
    "route": "/Composer/installModule",
    "method": "post",
    "params": {
      "controller": "Composer",
      "action": "installModule"
    }
  },
  {
    "route": "/Composer/updateModule",
    "method": "put",
    "params": {
      "controller": "Composer",
      "action": "updateModule"
    }
  },
  {
    "route": "/Composer/deleteModule",
    "method": "delete",
    "params": {
      "controller": "Composer",
      "action": "deleteModule"
    }
  },
  {
    "route": "/Composer/cancel",
    "method": "post",
    "params": {
      "controller": "Composer",
      "action": "cancel"
    }
  },
  {
    "route": "/Composer/logs",
    "method": "get",
    "params": {
      "controller": "Composer",
      "action": "logs"
    }
  },
  {
    "route": "/Composer/runUpdate",
    "method": "post",
    "params": {
      "controller": "Composer",
      "action": "runUpdate"
    }
  },
  {
    "route": "/Composer/cancelUpdate",
    "method": "delete",
    "params": {
      "controller": "Composer",
      "action": "cancelUpdate"
    }
  },
  {
    "route": "/:controller/:link/relation",
    "method": "post",
    "params": {
      "controller": "MassActions",
      "action": "addRelation",
      "scope": ":controller",
      "link": ":link"
    }
  },
  {
    "route": "/:controller/:link/relation",
    "method": "delete",
    "params": {
      "controller": "MassActions",
      "action": "removeRelation",
      "scope": ":controller",
      "link": ":link"
    }
  },
  {
    "route": "Dashlet/:dashletName",
    "method": "get",
    "params": {
      "controller": "Dashlet",
      "action": "GetDashlet",
      "dashletName": ":dashletName"
    }
  },
  {
    "route": "/Metadata",
    "method": "get",
    "params": {
      "controller": "Metadata"
    }
  },
  {
    "route": "I18n",
    "method": "get",
    "params": {
      "controller": "I18n"
    },
    "conditions": {
      "auth": false
    }
  },
  {
    "route": "/Settings",
    "method": "get",
    "params": {
      "controller": "Settings",
      "action": "read"
    },
    "conditions": {
      "auth": false
    }
  },
  {
    "route": "/Settings",
    "method": "patch",
    "params": {
      "controller": "Settings",
      "action": "patch"
    }
  },
  {
    "route": "/Settings",
    "method": "put",
    "params": {
      "controller": "Settings",
      "action": "patch"
    }
  },
  {
    "route": "User/passwordChangeRequest",
    "method": "post",
    "params": {
      "controller": "User",
      "action": "passwordChangeRequest"
    },
    "conditions": {
      "auth": false
    }
  },
  {
    "route": "User/changePasswordByRequest",
    "method": "post",
    "params": {
      "controller": "User",
      "action": "changePasswordByRequest"
    },
    "conditions": {
      "auth": false
    }
  },
  {
    "route": "/Stream",
    "method": "get",
    "params": {
      "controller": "Stream",
      "action": "list",
      "scope": "User"
    }
  },
  {
    "route": "/GlobalSearch",
    "method": "get",
    "params": {
      "controller": "GlobalSearch",
      "action": "search"
    }
  },
  {
    "route": "/:controller/action/:action",
    "method": "post",
    "params": {
      "controller": ":controller",
      "action": ":action"
    }
  },
  {
    "route": "/:controller/action/:action",
    "method": "put",
    "params": {
      "controller": ":controller",
      "action": ":action"
    }
  },
  {
    "route": "/:controller/action/:action",
    "method": "get",
    "params": {
      "controller": ":controller",
      "action": ":action"
    }
  },
  {
    "route": "/:controller/layout/:name",
    "method": "get",
    "params": {
      "controller": "Layout",
      "scope": ":controller"
    }
  },
  {
    "route": "/:controller/layout/:name",
    "method": "put",
    "params": {
      "controller": "Layout",
      "scope": ":controller"
    }
  },
  {
    "route": "/:controller/layout/:name",
    "method": "patch",
    "params": {
      "controller": "Layout",
      "scope": ":controller"
    }
  },
  {
    "route": "/Admin/clearCache",
    "method": "post",
    "params": {
      "controller": "Admin",
      "action": "clearCache"
    }
  },
  {
    "route": "/Admin/rebuildDb",
    "method": "post",
    "params": {
      "controller": "Admin",
      "action": "rebuildDb"
    }
  },
  {
    "route": "/Admin/jobs",
    "method": "get",
    "params": {
      "controller": "Admin",
      "action": "jobs"
    }
  },
  {
    "route": "/Admin/fieldManager/:scope/:name",
    "method": "get",
    "params": {
      "controller": "FieldManager",
      "action": "read",
      "scope": ":scope",
      "name": ":name"
    }
  },
  {
    "route": "/Admin/fieldManager/:scope",
    "method": "post",
    "params": {
      "controller": "FieldManager",
      "action": "create",
      "scope": ":scope"
    }
  },
  {
    "route": "/Admin/fieldManager/:scope/:name",
    "method": "put",
    "params": {
      "controller": "FieldManager",
      "action": "update",
      "scope": ":scope",
      "name": ":name"
    }
  },
  {
    "route": "/Admin/fieldManager/:scope/:name",
    "method": "patch",
    "params": {
      "controller": "FieldManager",
      "action": "update",
      "scope": ":scope",
      "name": ":name"
    }
  },
  {
    "route": "/Admin/fieldManager/:scope/:name",
    "method": "delete",
    "params": {
      "controller": "FieldManager",
      "action": "delete",
      "scope": ":scope",
      "name": ":name"
    }
  },
  {
    "route": "/:controller/:id",
    "method": "get",
    "params": {
      "controller": ":controller",
      "action": "read",
      "id": ":id"
    }
  },
  {
    "route": "/:controller",
    "method": "get",
    "params": {
      "controller": ":controller",
      "action": "index"
    }
  },
  {
    "route": "/:controller",
    "method": "post",
    "params": {
      "controller": ":controller",
      "action": "create"
    }
  },
  {
    "route": "/:controller/:id",
    "method": "put",
    "params": {
      "controller": ":controller",
      "action": "update",
      "id": ":id"
    }
  },
  {
    "route": "/:controller/:id",
    "method": "patch",
    "params": {
      "controller": ":controller",
      "action": "patch",
      "id": ":id"
    }
  },
  {
    "route": "/:controller/:id",
    "method": "delete",
    "params": {
      "controller": ":controller",
      "action": "delete",
      "id": ":id"
    }
  },
  {
    "route": "/:controller/:id/stream",
    "method": "get",
    "params": {
      "controller": "Stream",
      "action": "list",
      "id": ":id",
      "scope": ":controller"
    }
  },
  {
    "route": "/:controller/:id/subscription",
    "method": "put",
    "params": {
      "controller": ":controller",
      "id": ":id",
      "action": "follow"
    }
  },
  {
    "route": "/:controller/:id/subscription",
    "method": "delete",
    "params": {
      "controller": ":controller",
      "id": ":id",
      "action": "unfollow"
    }
  },
  {
    "route": "/:controller/:id/:link",
    "method": "get",
    "params": {
      "controller": ":controller",
      "action": "listLinked",
      "id": ":id",
      "link": ":link"
    }
  },
  {
    "route": "/:controller/:id/:link",
    "method": "post",
    "params": {
      "controller": ":controller",
      "action": "createLink",
      "id": ":id",
      "link": ":link"
    }
  },
  {
    "route": "/:controller/:id/:link",
    "method": "delete",
    "params": {
      "controller": ":controller",
      "action": "removeLink",
      "id": ":id",
      "link": ":link"
    }
  }
]
